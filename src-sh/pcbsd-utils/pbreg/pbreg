#!/bin/sh
# pbreg utility, allows us to set key / values via the CLI

GLOBREGFILE="/var/db/pbreg/registry"

# Set the pbreg settings dir
if [ "`id -u`" = "0" ] ; then
   REGDIR="/var/db/pbreg" 
else
   REGDIR="${HOME}/.config/pbreg"
fi

if [ ! -d "${REGDIR}" ] ; then
  mkdir -p "${REGDIR}"
fi

# Set the reg file
REGFILE="${REGDIR}/registry"

if [ ! -e "${REGFILE}" ] ; then
   touch ${REGFILE}
fi

usage() {
  echo "pbreg Version 2.0
--------
pbreg <command> <key> <value>

Commands:
  get - Gets a variable from the registry
  set - Sets a variable specified by <value> in the registry
  rem - Removes a variable from the registry

Examples:

 # pbreg get /PC-BSD/Version
 # pbreg set /PC-BSD/Version 1.0
 # pbreg rem /PC-BSD/Version"
exit 1
}

get_var() {
   VAR=`grep "^${KEYVAL}=" $REGFILE | uniq | head -n 1 |cut -d '=' -f 2-100`
   if [ -n "$VAR" ]; then
      echo -e "$VAR\c"
      exit 0
   fi

   # If running as user check global reg
   if [ "`id -u`" != "0" ] ; then
     VAR=`grep "^${KEYVAL}=" $GLOBREGFILE | uniq | head -n 1 |cut -d '=' -f 2-100`
     if [ -n "$VAR" ]; then
        echo -e "$VAR\c"
        exit 0
     fi
   fi

   exit 1
}

set_var() {
   echo $KEYVAL | grep -q "="
   if [ $? -eq 0 ] ; then
     echo "Error: Key value cannot contain '='"
     exit 1
   fi

   cat ${REGFILE} | grep -v "^${KEYVAL}=" | sort | uniq > ${REGFILE}.tmp
   echo "${KEYVAL}=${SETVAL}" >> ${REGFILE}.tmp
   sort ${REGFILE}.tmp | uniq > ${REGFILE}
   rm ${REGFILE}.tmp
   exit 0
}

rem_var() {
   cat ${REGFILE} | grep -v "^${KEYVAL}=" | sort | uniq > ${REGFILE}.tmp
   mv ${REGFILE}.tmp ${REGFILE}
   exit 0
}

# Some sanity checks
if [ -z "${2}" ] ; then usage ; fi
if [ "${1}" = "set" -a -z "${3}" ] ; then usage ; fi

# Save the args
KEYVAL="${2}"
SETVAL="${3}"

case $1 in
        get) get_var ;;
        set) set_var ;;
        rem) rem_var ;;
        *) usage ;;
esac

exit 0
