#!/bin/sh
# Script which performs updating services
############################################################################

# Source our functions
. /usr/local/share/pcbsd/scripts/functions.sh

# Set the program location
PROGDIR="/usr/local/share/pcbsd/pc-updatemanager" ; export PROGDIR

# Start by sourcing /etc/profile
# This grabs any HTTP_ / FTP_ PROXY variables
. /etc/profile

PCBSD_ETCCONF="/usr/local/etc/pcbsd.conf"
export PCBSD_ETCCONF

# Set the pub openssl key
SKEY="${PROGDIR}/conf/security.key" ; export SKEY

# Directory to store downloaded updates
DOWNLOADDIR="/usr/local/tmp"

# Get the system version we are checking for updates to
SYSVER="`uname -r | cut -d '-' -f 1-2`" ; export SYSVER

# Get the system type
SYSTYPE="`/usr/local/bin/pbreg get /PC-BSD/SysType`" ; export SYSTYPE

# Set the config location
UPDATECONF="${PROGDIR}/conf/sysupdate.conf"

# Set the system arch type
ARCH=`uname -m`

# Patchset Data
PATCHSERVER="`cat ${UPDATECONF} | grep '^UPDATESERVER:' | cut -d ' ' -f 2`"
PATCHSET="`cat ${UPDATECONF} | grep '^PATCHSET:' | cut -d ' ' -f 2`"
PATCHFILE="${PATCHSET}.upd"
PATCHURL="${PATCHSERVER}/${PATCHFILE}"
PATCHTMPDIR=`mktemp -d /tmp/.sysupdateXXXXXX`
PATCHTMPFILE="${PATCHTMPDIR}/sysupdate-${SYSVER}.upd"

MUSTAGEDIR="${DOWNLOADDIR}/update-stagedir"

# Enable ftp passive mode for file transfers
FTP_PASSIVE_MODE="YES" ; export FTP_PASSIVE_MODE

if [ ! -d "${DOWNLOADDIR}" ]; then mkdir -p ${DOWNLOADDIR}; fi


# Trigger File for Tray Application
TRIGGERFILE="/tmp/.sysupdatetraytrigger"

DBDIR="/var/db/pc-updatemanager"
INSDIR="${DBDIR}/installed"
IGNDIR="${DBDIR}/ignored"

# PKG_CMD to use
PKG_CMD="/usr/sbin/pkg"

# Make sure we don't keep these from system environment
unset INJAIL PKG_FLAG

ISOTMP="/usr/local/tmp/pcbsd-update.iso"

######################################################################
# Done with config values
######################################################################

# Get the PACKAGE_SET to use for this pkgng repo
PACKAGE_SET="PRODUCTION"
_pkgChk="`sed -n 's/PACKAGE_SET: //p' ${PCBSD_ETCCONF} 2>/dev/null | awk '{print $1}'`"
if [ -n "${_pkgChk}" ] ; then PACKAGE_SET="$_pkgChk" ; fi

# Check the PACKAGE_SET variable
case $PACKAGE_SET in
   PRODUCTION|EDGE) ;;
  CUSTOM) # Using a custom package set?
          # Lets check that we have a URL provided
	  _urlChk="`sed -n 's/^PACKAGE_URL: //p' ${PCBSD_ETCCONF} 2>/dev/null | awk '{print $1}'`"
	  if [ -z "${_urlChk}" ] ; then
	     echo "Warning: PACKAGE_SET is CUSTOM, but no PACKAGE_URL set!"
	     echo "Reverting back to PRODUCTION repo..."
	     sleep 3
             CUSTOM_URL=""
	     PACKAGE_SET="PRODUCTION"
	  else
	     CUSTOM_URL="$_urlChk"
          fi
	  _urlChk="`sed -n 's/^CURSYS_PACKAGE_URL: //p' ${PCBSD_ETCCONF} 2>/dev/null | awk '{print $1}'`"
	  if [ -z "${_urlChk}" ] ; then
             CUSTOM_CURSYS_URL=""
	  else
	     CUSTOM_CURSYS_URL="$_urlChk"
          fi
          ;;
       *) echo "Warning: Invalid PACKAGE_SET!" 
          PACKAGE_SET="PRODUCTION" ;; 
esac



# Files we always want to upgrade in /etc
ETCCLOBBER="mail/sendmail.cf mail/freebsd.cf"

show_usage() {
        echo "pc-updatemanager: Usage
----
  branches 		- List available system branches
  chbranch <tag> 	- Change to new system branch
  check 		- Check for system updates
  install <tag>,<tag2> 	- Install system updates
  pkgcheck 		- Check for updates to packages
  pkgupdate 		- Install packages updates
  syncconf		- Update PC-BSD pkgng configuration
  confcheck		- Check PC-BSD pkgng configuration
  -j <jail>		- Operate on the jail specified
"	

	exit 1
}

setup_pkgng_conf() {

  # See if we need to adjust pcbsd.conf repo file
  if [ ! -e "/usr/local/etc/pkg/repos/pcbsd.conf.dist" ];then
     echo "WARNING: Missing /usr/local/etc/pkg/repos/pcbsd.conf.dist"
     status="1"
     return 1
  fi

  # Remove old pkg conf
  if [ -e "/usr/local/etc/pkg/repos/pcbsd.conf" ] ; then
    rm /usr/local/etc/pkg/repos/pcbsd.conf
  fi

  ARCH=`uname -m`
  FBSDVER=`uname -r | cut -d '-' -f 1-2`
  MAJORVER="`uname -r | cut -d '-' -f 1 |  cut -d '.' -f 1`.0-RELEASE"

  # If using the EDGE package set, set the right path
  case $PACKAGE_SET in
       EDGE) FBSDVER="$FBSDVER/edge"
	     MAJORVER="$MAJORVER/edge"
	     ;;
          *) ;;
  esac

  # We are now going to create pcbsd.conf and 01pcbsd.conf
  # The first is set to the systems uname path
  # The second is set to the XX.0-RELEASE path
  #
  # This is done so that on 10.1 or 10.0-STABLE or other non .0-RELEASEs
  # our package builders only need to build packages that specifically need
  # to be compiled on that kernel / release.
  # I.E nvidia-drivers, -kmod packages, etc.
  # The other packages which should be ABI compatiable can be pulled from
  # the main XX.0-RELEASE repository

  # Now create standard pcbsd.conf file
  if [ "$PACKAGE_SET" = "CUSTOM" -a -n "$CUSTOM_URL" ] ; then
     cat << EOF >/usr/local/etc/pkg/repos/pcbsd.conf
pcbsd-major: {
               url: "$CUSTOM_URL",
               signature_type: "fingerprints",
               fingerprints: "/usr/local/etc/pkg/fingerprints/pcbsd",
               enabled: true
              }
EOF
  else
     # Using PC-BSD CDN
     cat /usr/local/etc/pkg/repos/pcbsd.conf.dist \
	| sed "s|pcbsd: |pcbsd-major: |g" \
	| sed "s|VERSION|$MAJORVER|g" \
	| sed "s|ARCH|$ARCH|g" > /usr/local/etc/pkg/repos/pcbsd.conf
  fi

  if [ -e "/usr/local/etc/pkg/repos/01pcbsd.conf" ] ; then
     rm /usr/local/etc/pkg/repos/local-pcbsd.conf >/dev/null 2>/dev/null #eventually remove
     rm /usr/local/etc/pkg/repos/01pcbsd.conf
  fi

  # If the release and local versions are the same, we can skip creating this file for now
  if [ "$FBSDVER" = "$MAJORVER" ] ; then return 0; fi
  if [ "$PACKAGE_SET" = "CUSTOM" -a "$CUSTOM_URL" = "$CUSTOM_CURSYS_URL" ] ; then return 0; fi

  # Create the 01pcbsd.conf file
  if [ "$PACKAGE_SET" = "CUSTOM" -a -n "$CUSTOM_CURSYS_URL" ] ; then
     cat << EOF >/usr/local/etc/pkg/repos/01pcbsd.conf
pcbsd-sysrel: {
               url: "$CUSTOM_CURSYS_URL",
               signature_type: "fingerprints",
               fingerprints: "/usr/local/etc/pkg/fingerprints/pcbsd",
               enabled: true
              }
EOF
  else
     # Using PC-BSD CDN
     cat /usr/local/etc/pkg/repos/pcbsd.conf.dist \
	| sed "s|pcbsd: |pcbsd-sysrel: |g" \
	| sed "s|VERSION|$FBSDVER|g" \
	| sed "s|ARCH|$ARCH|g" > /usr/local/etc/pkg/repos/01pcbsd.conf
  fi

}

get_update_file() {

  # Now fetch the update file
  get_file "${PATCHURL}" "${PATCHTMPFILE}" 1 >/dev/null 2>/dev/null
  if [ $? -ne 0 ] ; then
     rm ${PATCHTMPFILE} 2>/dev/null
     is_net_up
     if [ $? -eq 0 ] ; then 
       echo "No updates available for $SYSVER!" ; exit 0 
     else
       exit_err "Could not contact update server!"
     fi
  fi

  # Now fetch the update file signature
  get_file "${PATCHURL}.sha1" "${PATCHTMPFILE}.sha1" 1 >/dev/null 2>/dev/null
  if [ $? -ne 0 ] ; then
     rm ${PATCHTMPFILE}.sha1 2>/dev/null
     is_net_up
     if [ $? -eq 0 ] ; then 
       echo "No updates available for $SYSVER!" ; exit 0 
     else
       exit_err "Could not contact update server!"
     fi
  fi

  # Lets verify the signature of the file
  openssl dgst -sha1 -verify ${SKEY} \
	-signature ${PATCHTMPFILE}.sha1 \
        ${PATCHTMPFILE} >/dev/null 2>/dev/null
  if [ $? -ne 0 ] ; then
     rm ${PATCHTMPFILE} 2>/dev/null
     rm ${PATCHTMPFILE}.sha1 2>/dev/null
     exit_err "Update file failed verification..."
  fi

  # Done with the signature we can discard
  rm ${PATCHTMPFILE}.sha1

}

do_branch() {
  up="$1"

  # Setup our variable to catch if we have a bad branch
  BRANCHFOUND="0" 

  while read line
  do
     echo $line | grep -q "^BRANCHES:"
     if [ $? -eq 0 ] ; then
	for i in `echo $line | cut -d ':' -f 2 | sed 's|,| |g'`
	do
  	  if [ "$i" != "$up" ] ; then continue ;fi
  	  if [ "`uname -r | cut -d '-' -f 1-2`" = "$up" ] ; then 
	     echo "You are already on this branch!"
             BRANCHFOUND="1"
	     continue;
	  fi
          start_major_fbsd_update "fbsd-$up"
          BRANCHFOUND="1"
	  break
	done
     fi
  done < ${PATCHTMPFILE}

  # If no patches
  if [ "${BRANCHFOUND}" = "0" ]; then 
     # No available updates
     echo "Unknown branch ${1}"
  fi

  rm ${PATCHTMPFILE}

};

list_branches() {
  # Setup our variable, we have no branches so far
  BRANCHFOUND="0" 

  while read line
  do
     echo $line | grep -q "^BRANCHES:"
     if [ $? -eq 0 ] ; then
	echo "Available branches:"
	echo "* = Current Branch"
        echo "----------------------------------"
	echo $line | cut -d ':' -f 2 | sed 's|,|\
|g' | while read branch
	do
		if [ "`uname -r | cut -d '-' -f 1-2`" = "$branch" ] ; then
			echo "$branch *"
		else
			echo "$branch"
		fi
	done
	echo ""
	echo "To change branches run: ${0} chbranch <branch>"
        BRANCHFOUND="1"
        continue
     fi
  done < ${PATCHTMPFILE}

  # If no patches
  if [ "${BRANCHFOUND}" = "0" ]; then 
     # No available updates
     echo "No branches currently available!"
  fi

  rm ${PATCHTMPFILE}

};

do_fbsdcheck() {
  # Setup our variable, we have no patches so far
  PATCHFOUND="0" 
  echo "Checking for FreeBSD updates..."
  pc-fbsdupdatecheck | grep -q "will be updated"
  if [ $? -eq 0 ] ; then
     PATCHFOUND="1"
  fi

  if [ "${PATCHFOUND}" = "1" ]; then
    echo "The following updates are available:"
    echo "------------------------------------"
    echo "NAME: FreeBSD system update"
    echo "TYPE: System Update"
    echo " "
    echo "Install: \"freebsd-update fetch && freebsd-update install\""
    echo " "

    if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
      pc-systemflag SYSUPDATE UPDATE #set the system flag that system updates are available
    fi
  fi
}

do_check() {

  while read line
  do
     echo $line | grep -q "^MU:"
     if [ $? -eq 0 ] ; then
        parse_mu_update_line "$line"
        continue
     fi
     echo $line | grep -q "^SA:"
     if [ $? -eq 0 ] ; then
        parse_sa_update_line "$line"
        continue
     fi
  done < ${PATCHTMPFILE}

  # If no patches
  if [ "${PATCHFOUND}" = "0" ]; then 
     # No available updates
     echo "Your system is up to date!"
     if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
       pc-systemflag SYSUPDATE SUCCESS #set the system flag that system is up to date
     fi
  else
    if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
      pc-systemflag SYSUPDATE UPDATE #set the system flag that system updates are available
    fi
  fi

  rm ${PATCHTMPFILE}

};

parse_mu_update_line()
{
   local line="$1"

   # Check if this is a major update we can install
   local sysUpOVer=`echo $line | cut -d ':' -f 2`
   local sysUpNVer=`echo $line | cut -d ':' -f 3`

   # Is this an update for our version?
   if [ "$SYSVER" != "$sysUpOVer" ] ; then return; fi

   if [ $PATCHFOUND -eq 0 ] ; then
      echo ""
      echo "The following updates are available:"
      echo "------------------------------------"
   fi
   echo "NAME: System Update to ${sysUpNVer}" 
   echo "TYPE: SYSUPDATE" 
   echo "TAG: fbsd-${sysUpNVer}"
   echo "VERSION: ${sysUpNVer}" 
   echo ""
   echo "To install: \"pc-updatemanager install fbsd-${sysUpNVer}\""
   echo ""
   echo ""

   PATCHFOUND="`expr ${PATCHFOUND} + 1`" 
}

parse_sa_update_line()
{
   local line="$1"

   # Check if this is an update we can install
   local saVer=`echo $line | cut -d ':' -f 2`
   local saArch=`echo $line | cut -d ':' -f 3`
   local saType=`echo $line | cut -d ':' -f 4`
   local saIdent="`echo $line | cut -d ':' -f 5`"

   # For this version?
   if [ "$SYSVER" != "$saVer" ] ; then return ; fi

   # For this system arch?
   if [ "$ARCH" != "$saArch" -a "$saArch" != "noarch" ] ; then return ; fi

   # For this system type?
   if [ "$SYSTYPE" != "$saType" -a "$saType" != "both" ] ; then return ; fi

   # Already installed?
   if [ -e "${INSDIR}/${SYSVER}/$saIdent" ] ; then return ; fi

   if [ $PATCHFOUND -eq 0 ] ; then
      echo ""
      echo "The following updates are available:"
      echo "------------------------------------"
   fi
   local saDesc="`echo $line | cut -d ':' -f 6`"
   local saSize=`echo $line | cut -d ':' -f 8`
   local saDetail="http://wiki.pcbsd.org`echo $line | cut -d ':' -f 10`"
   local saDate="`echo $line | cut -d ':' -f 11`"

   echo "NAME: ${saDesc}" 
   echo "TYPE: PATCH" 
   echo "TAG: ${saIdent}"
   echo "DETAILS: ${saDetail}"
   echo "DATE: ${saDate}"
   echo "SIZE: ${saSize}Mb" 
   echo " "
   echo "To install: \"pc-updatemanager install ${saIdent}\""
   echo " "

   PATCHFOUND="`expr ${PATCHFOUND} + 1`" 
}

start_pcbsd_patch() {
  local up="$1"
  local saIdent=""
  local saVer=""
  local saArch=""
  local saPlat=""
  local saUrl=""
  local saDesc=""
  local saCsum=""
  local patchLine=""
  if [ -e "${INSDIR}/${SYSVER}/${up}" ]; then 
     rm ${PATCHTMPFILE}
     exit_err "Patch $up already installed!"
  fi

  while read line
  do
    echo $line | grep -q "^SA:"
    if [ $? -ne 0 ] ; then continue; fi
    saIdent="`echo $line | cut -d ':' -f 5`"
    # Look for the right stand-alone update
    if [ "$saIdent" != "$up" ] ; then continue ; fi
    saVer=`echo $line | cut -d ':' -f 2`
    saArch=`echo $line | cut -d ':' -f 3`
    saType=`echo $line | cut -d ':' -f 4`
    # Does this update apply to this system arch?
    if [ "$saArch" != "$ARCH" -a "$saArch" != "noarch" ] ; then 
       rm ${PATCHTMPFILE}
       exit_err "Patch $up is not for this system arch type!"
    fi
    # For this version?
    if [ "$saVer" != "$SYSVER" ] ; then 
       rm ${PATCHTMPFILE}
       exit_err "Patch $up is not for this system version!"
    fi

    # For this system type?
    if [ "$SYSTYPE" != "$saType" -a "$saType" != "both" ] ; then
       rm ${PATCHTMPFILE}
       exit_err "Patch $up is not for this system type!"
    fi

    # Got here? We have a patch ready to go
    patchLine="$line"
    break
  done < ${PATCHTMPFILE}

  # Did we find the patch?
  if [ -z "$patchLine" ] ; then 
     rm ${PATCHTMPFILE}
     exit_err "Patch $up not found!"
  fi

  # Get the patch details
  saVer=`echo $patchLine | cut -d ':' -f 2`
  saArch=`echo $patchLine | cut -d ':' -f 3`
  saPlat=`echo $patchLine | cut -d ':' -f 4`
  saIdent="`echo $patchLine | cut -d ':' -f 5`"
  saDesc="`echo $patchLine | cut -d ':' -f 6`"
  saUrl="`echo $patchLine | cut -d ':' -f 7`"
  saCsum="`echo $patchLine | cut -d ':' -f 9`"
  local FILENAME="`basename $saUrl`"

  # Start downloading the patch
  touch ${TRIGGERFILE}
  echo "DOWNLOADING: ${saIdent}"
  echo "DOWNLOADING: ${saIdent}" >${TRIGGERFILE}

  # Get the file
  get_file_from_mirrors "/${saUrl}" "${DOWNLOADDIR}/${FILENAME}" "update"
  if [ $? -ne 0 ] ; then
     rm ${PATCHTMPFILE}
     echo "FAILED: ${saIdent}" >${TRIGGERFILE}
     exit_err "Failed to download: ${saIdent}"
  fi

  # Check the sha256 checksum
  if [ "$saCsum" != "`sha256 -q ${DOWNLOADDIR}/${FILENAME} 2>/dev/null`" ]
  then
     # Download MD5 doesn't match! Delete the file
     rm ${PATCHTMPFILE}
     rm ${DOWNLOADDIR}/${FILENAME}
     echo "FAILED: ${saIdent}" >${TRIGGERFILE}
     exit_err "Failed to download: ${saIdent}"
  else 
     echo "DOWNLOADFINISHED: ${saIdent}"
     echo "DOWNLOADFINISHED: ${saIdent}" >${TRIGGERFILE}
  fi

  echo "INSTALLING: ${saIdent}" >${TRIGGERFILE}
  sleep 1

  # Lets auto-create a new boot-environment before updating
  create_auto_beadm

  PATCHTMPDIR="`mktemp -d ${DOWNLOADDIR}/patchInstallXXXXX`"
  rc_halt "tar xvJf ${DOWNLOADDIR}/${FILENAME} -C ${PATCHTMPDIR}" 2>/dev/null
  PATCHDIR="$PATCHTMPDIR" ; export PATCHDIR
  cd ${PATCHTMPDIR}
  sh update.sh
  if [ $? -eq 0 ]; then
     touch "${INSDIR}/${SYSVER}/${saIdent}"
     echo "INSTALLFINISHED: ${saIdent}"
     echo "INSTALLFINISHED: ${saIdent}" >${TRIGGERFILE}
  else
     rm ${PATCHTMPFILE}
     rm -rf ${PATCHTMPDIR}
     rm ${DOWNLOADDIR}/${FILENAME}
     echo "INSTALLFAILED: ${saIdent}" >${TRIGGERFILE}
     exit_err "INSTALLFAILED: ${saIdent}"
  fi

  rc_halt "rm -rf ${PATCHTMPDIR}"
  rc_halt "rm ${DOWNLOADDIR}/${FILENAME}"
}

rollback_update()
{
}

# After installing the kernel and rebooting, this gets run
finish_major_fbsd_update() {

  PATH="${PATH}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
  export PATH

  # Set some status variables
  PKGSTATUS=0
  USERPKGSTATUS=0
  PBISTATUS=0
  FREEBSDSTATUS=0
  GRUBSTATUS=0
  METASTATUS=0

  # Clear any old summary files
  rm /root/.failed-pkgs 2>/dev/null
  rm /root/.failed-freebsd 2>/dev/null
  rm /root/.failed-grub 2>/dev/null

  # Is this a desktop or server?
  if [ -e "/usr/local/bin/pc-softwaremanager" ] ; then
     SYSTYPE="desktop"
  else
     SYSTYPE="server"
  fi

  # Lets Mount the image image now
  clear
  MD=`mdconfig -a -t vnode -f ${ISOTMP}` ; export MD
  if [ ! -d "/mnt/iso-update" ] ; then mkdir -p "/mnt/iso-update"; fi
  mount -t cd9660 /dev/$MD /mnt/iso-update
  if [ $? -ne 0 ] ; then
     # This should never happen, but just in case the user removed the ISO
     # file or something causes mdconfig / mount to fail, lets roll back
     rm /var/.freebsd-update-finish
     rm -rf /boot/kernel
     mv /boot/kernel.preUpgrade /boot/kernel

     echo "ERROR: Could not mount ${ISOTMP}... Did the file get removed?"
     echo "The update will now be canceled. Please try again later."
     echo "Press ENTER to continue"
     read tmp
     reboot
     exit 1
  fi

  # Start the package cleanup process
  clear
  echo "Removing packages...This may take a while..."
  ${PKG_CMD} delete -afy
  if [ $? -ne 0 ] ; then
     echo "Warning: Failed to remove all packages"
     sleep 5
  fi
  echo "Done!"


  # Setup temp logfile
  if [ -e "/root/.failed-freebsd" ] ; then rm /root/.failed-freebsd; fi
  clear

  # We need to be sure and removal the immutable flags
  echo "Preparing filesystem..."
  chflags -R noschg /

  distFiles="base doc games lib32"
  for i in $distFiles
  do
    echo -e "Updating world: $i...\c"
    tar -xvp -f /mnt/iso-update/dist/${i}.txz --exclude ./proc --exclude ./etc/ -C / >> /tmp/.extract.$$ 2>> /tmp/.extract.$$
    if [ $? -ne 0 ] ; then
       FREEBSDSTATUS=1
       echo -e "Warning!"
       cat /tmp/.extract.$$ >> /root/.failed-freebsd
       sleep 5
    else
       echo -e "Done"
    fi
  done
  rm /tmp/.extract.$$

  # Now time to do all the etcmerge stuff
  TMPETC="/root/etc-update"
  if [ -d "$TMPETC" ] ; then rm -rf $TMPETC ; fi
  mkdir -p $TMPETC

  tar -xvp -f /mnt/iso-update/dist/base.txz -C ${TMPETC} ./etc >/dev/null 2>/dev/null
  mv ${TMPETC}/etc ${TMPETC}/etc-new

  # Can nuke these two, will be re-generated during etcmerge
  rm ${TMPETC}/etc-new/spwd.db
  rm ${TMPETC}/etc-new/pwd.db

  echo "Merging /etc..."
  /sbin/etcmerge -d ${TMPETC} init  >> /root/.failed-freebsd 2>> /root/.failed-freebsd
  cd $TMPETC

  # Lets copy the files we always want to clobber
  for i in ${ETCCLOBBER}
  do
     # If this file existed on system, save copy of old version
     if [ -e "/etc/$i" ] ; then
        cp /etc/${i} etc-merged/${i}.preUpgrade
     fi
     # Overwrite the new version
     if [ -e "etc-merged/${i}" ] ; then
        cp etc-new/${i} etc-merged/${i}
     fi
  done

  # Lets resolve the conflicts found, use the *new* strings by default
  # Copy the old file to /etc/<file>.preUpgrade
  for i in $(cat *.conflicts 2> /dev/null); do
     if [ ! -e "etc-merged/${i}" ] ; then continue ; fi
     if egrep -q '^(<<<<<<< |=======$|>>>>>>> )' etc-merged/$i; then
	cp /etc/${i} etc-merged/${i}.preUpgrade

	# Lets parse out the old, bring in new changes
	rem=0
        while read line
	do
	  echo "$line" | egrep -q '^<<<<<<< '
	  if [ $? -eq 0 ] ; then rem=1 ; continue ; fi

	  echo "$line" | egrep -q '^=======$'
	  if [ $? -eq 0 ] ; then rem=0 ; continue ; fi

	  echo "$line" | egrep -q '^>>>>>>> '
	  if [ $? -eq 0 ] ; then rem=0 ; continue ; fi

	  if [ $rem -eq 0 ] ; then echo "$line" >> etc-merged/${i}.new ; fi
	done < etc-merged/${i}

	# Copy the fixed file
	cp -p etc-merged/${i}.new etc-merged/${i}
	rm etc-merged/${i}.new
     fi
  done

  # Now install the merged /etc/ stuff
  cd $TMPETC
  /sbin/etcmerge -d ${TMPETC} install >> /root/.failed-freebsd 2>>/root/.failed-freebsd
  if [ $? -ne 0 ] ; then
     FREEBSDSTATUS=1
     echo "Warning: Failed etcmerge install..."
     sleep 5
  fi

  # Save the etc-new directory as the old one now
  rm -rf /var/db/etc
  cp -r etc-new /var/db/etc

  # Cleanup
  rm -rf ${TMPETC}
  rm /sbin/etcmerge

  clear

  # Remove this, causes all kinds of havok during the update
  if [ -e "/etc/pkg/FreeBSD.conf" ] ; then
    mv /etc/pkg/FreeBSD.conf /etc/pkg/FreeBSD.conf.dist
  fi

  clear
  echo "Starting networking..."
  echo ""
  # Enable networking
  /etc/rc.d/devfs restart
  /etc/rc.d/netif restart
  /etc/rc.d/devd start
  /etc/rc.d/wpa_supplicant start
  /etc/rc.d/dhclient start
  sleep 8
  clear

  # This is super-lame, we can't just remove all packages *except* pkgng, so we have to re-bootstrap
  # Lets extract the new pkgng we fetched earlier
  echo "Boot-Strapping PKGNG..."
  if [ ! -d "/usr/local/etc/pkg/fingerprints/pcbsd/revoked" ] ; then
     mkdir "/usr/local/etc/pkg/fingerprints/pcbsd/revoked"
  fi
  cd /mnt/iso-update/dist/packages/All
  pkgFile=`ls pkg-[1-9]*`
  tar xvpf $pkgFile -C / /usr/local/sbin/pkg-static >/dev/null 2>/dev/null
  /usr/local/sbin/pkg-static add -f $pkgFile
  if [ $? -ne 0 ] ; then
     echo "Warning: Failed to re-install PKGNG..."
     echo "Press ENTER to continue"
     read tmp
  fi


  # Lets create our fake pcbsd.conf file
  echo "pcbsd: {
  url: \"file:///mnt/iso-update/dist/packages\",
  enabled: true
}" >  /usr/local/etc/pkg/repos/pcbsd.conf

  # Now update pkgng
  ${PKG_CMD} update -f
  if [ $? -ne 0 ] ; then
     echo "Failed updating pkgng repo..."
     sleep 5
  fi

  # Now lets begin re-installing packages
  if [ "$SYSTYPE" = "desktop" ] ; then
    echo "Installing desktop packages..."
    ${PKG_CMD} install -y misc/pcbsd-base
    if [ $? -ne 0 ] ; then
       PKGSTATUS=1
       echo "pcbsd-base" >> /root/.failed-pkgs
       echo "Warning: Failed to install pcbsd-base!"
       echo "You will need to manually install this package to re-enable the PC-BSD desktop"
       echo "Press ENTER to continue"
       read tmp
    fi
    pc-extractoverlay desktop
  else
    echo "Installing server packages..."
    ${PKG_STATIC} install -y misc/trueos-base
    if [ $? -ne 0 ] ; then
       PKGSTATUS=1
       echo "trueos-base" >> /root/.failed-pkgs
       echo "Warning: Failed to install trueos-base!"
       echo "You will need to manually install this package for the TrueOS utils."
       echo "Press ENTER to continue"
       read tmp
    fi
    pc-extractoverlay server
  fi

  # Now lets try re-installing any user-installed packages
  clear
  echo "Re-Installing packages"
  while read userpkg
  do
    # Make sure package isn't already installed
    ${PKG_CMD} info -e ${userpkg}
    if [ $? -eq 0 ] ; then continue ; fi

    # Nope, lets try to load it now
    ${PKG_CMD} install -y ${userpkg}
    if [ $? -ne 0 ] ; then
       USERPKGSTATUS=1
       echo "${userpkg}" >> /root/.failed-user-pkgs
    fi
  done < /root/pcbsd-pkg-before-update

  cd /

  # Now lets do the overlay extraction (This cleans up the fake pcbsd.conf)
  pc-extractoverlay ports

  # Last but not least, lets make sure to re-stamp GRUB in case any loader.conf.pcbsd modules changed
  grub-mkconfig -o /boot/grub/grub.cfg | tee /root/.failed-grub
  if [ $? -ne 0 ] ; then
     GRUBSTATUS=1
     echo "Warning: Failed running 'grub-mkconfig -o /boot/grub/grub.cfg'"
     echo "Press ENTER to continue"
     read tmp
  fi


  # Now lets show a summary
  clear

  echo "PC-BSD `uname -r` Upgrade Summary - (`date`)" > /root/pcbsd-update-summary
  echo "-----------------------------------------------------" >> /root/pcbsd-update-summary

  if [ $FREEBSDSTATUS -eq 0 ] ; then
    echo "FreeBSD: The base-system updated successfully!" >> /root/pcbsd-update-summary
  else
    echo "FreeBSD: The base-system failed to install:" >> /root/pcbsd-update-summary
    cat /root/.failed-freebsd >> /root/pcbsd-update-summary
  fi

  if [ $PKGSTATUS -eq 0 ] ; then
    echo "    PKG: All packages updated successfully!" >> /root/pcbsd-update-summary
  else
    echo "    PKG: The following packages failed to install:" >> /root/pcbsd-update-summary
    cat /root/.failed-pkgs >> /root/pcbsd-update-summary
  fi

  if [ $USERPKGSTATUS -eq 0 ] ; then
    echo "USERPKG: All packages updated successfully!" >> /root/pcbsd-update-summary
  else
    echo "USERPKG: The following user-packages failed to install:" >> /root/pcbsd-update-summary
    cat /root/.failed-user-pkgs >> /root/pcbsd-update-summary
  fi

  if [ $GRUBSTATUS -eq 0 ] ; then
    echo "   GRUB: The GRUB boot-loader menus re-built successfully!" >> /root/pcbsd-update-summary
  else
    echo "   GRUB: The GRUB boot-loader menus failed to rebuild:" >> /root/pcbsd-update-summary
    cat /root/.failed-grub >> /root/pcbsd-update-summary
  fi

  echo "" >> /root/pcbsd-update-summary
  echo "Old system information: " >> /root/pcbsd-update-summary
  echo "/root/pcbsd-pkg-before-update" >> /root/pcbsd-update-summary

  echo "" >> /root/pcbsd-update-summary

  echo "This summary location: /root/pcbsd-update-summary" >> /root/pcbsd-update-summary

  # Clear any old summary files
  rm /root/.failed-pkgs 2>/dev/null
  rm /root/.failed-user-pkgs 2>/dev/null
  rm /root/.failed-grub 2>/dev/null
  rm /root/.failed-freebsd 2>/dev/null

  more /root/pcbsd-update-summary

  # Cleanup time
  cd /
  umount /mnt/iso-update 2>/dev/null
  mdconfig -d -u $MD 2>/dev/null
  rm ${ISOTMP} 2>/dev/null

  echo "Press ENTER to reboot"
  read tmp

  exit 0
}

# Simple recursive loop to go through and get a list of all package deps for a top level package
get_dep_origins()
{
  grep -q "^$1\$" "${2}.checked" 2>/dev/null
  if [ $? -eq 0 ] ; then return; fi
  echo "$1" >> ${2}.checked

  local i
  for i in `${PKG_CMD} query '%do' ${1}`
  do
     echo "$i" >> ${2}
     get_dep_origins "$i" "$2"
  done
}

start_major_fbsd_update() {
  local rel=`echo $1 | sed 's|fbsd-||g'`

  # Do the disk-space check
  rZpool="`mount | grep 'on / ' | awk '{print $1}' | cut -d '/' -f 1`"
  poolFree="`zpool list -H -o free $rZpool`"

  # is space in GB?
  echo "$poolFree" | grep -q "G"
  if [ $? -eq 0 ] ; then
     poolFree="`echo $poolFree | sed 's|G||g'`"
     if [ $poolFree -lt 10 ] ; then
        exit_err "Need at least 20GB of free space to continue"
     fi
  fi

  # Is space in MB?
  echo "$poolFree" | grep -q "M"
  if [ $? -eq 0 ] ; then
     poolFree="`echo $poolFree | sed 's|M||g'`"
     if [ $poolFree -lt 10000 ] ; then
        exit_err "Need at least 20GB of free space to continue"
     fi
  fi

  # Grab the ISO file from the mirrors
  get_file_from_mirrors "/$rel/$ARCH/latest.iso" "$ISOTMP" "iso"
  get_file_from_mirrors "/$rel/$ARCH/latest.iso.md5" "${ISOTMP}.md5" "iso"

  # Verify the ISO file is good for an update
  verify_iso_data

  # Lets auto-create a new boot-environment before updating
  create_auto_beadm

  # Build a list of *all* package origins
  ${PKG_CMD} query -a '%o' | grep -v "misc/pcbsd-base" \
	| grep -v "misc/trueos-base" | grep -v "ports-mgmt/pkg" \
	| sort > /root/pcbsd-pkg-before-update

  # Now install the updated kernel
  if [ -d "/boot/kernel.preUpgrade" ] ; then
     rm -rf /boot/kernel.preUpgrade
  fi
  mv /boot/kernel /boot/kernel.preUpgrade

  echo "Updating kernel..."
  tar xf /mnt/iso-update/dist/kernel.txz -C / 2>/dev/null >/dev/null
  if [ $? -ne 0 ] ; then
       rm -rf /boot/kernel
       mv /boot/kernel.preUpgrade /boot/kernel
       umount /mnt/iso-update
       mdconfig -d -u $MD
       rollback_update
       exit_err "Kernel update failed! (Old kernel restored)"
  fi

  # Unmount / cleanup ISO
  umount /mnt/iso-update
  mdconfig -d -u $MD

  # Touch our marker that we will need to reboot before doing other updates
  touch /var/.freebsd-update-finish
  touch /tmp/.fbsdup-reboot

  echo "Major update staged!"
  echo "Please reboot the system for the updater to continue."
  exit 0
}

## Do a fetch of a pristine /etc directory for the three way etcmerge
fetch_clean_etc()
{
  echo "Fetching pristine /etc for merging..."
  baseTmp="/usr/local/tmp/base.txz.$$"
  get_file_from_mirrors "/$SYSVER/$ARCH/dist/base.txz" "$baseTmp" "iso"
  if [ $? -ne 0 ] ; then return 1 ; fi

  rm -rf "/var/db/etc/"
  echo "Extracting pristine /etc for merging..."
  tar xvpf ${baseTmp} -C /var/db ./etc >/dev/null 2>/dev/null
  local err=$?
  rm ${baseTmp}
  return $err
}

## Verify that ISO is suitable for upgrading with
verify_iso_data()
{
  if [ ! -e "${ISOTMP}" ] ; then
     rollback_update
     exit_err "ISO fails checksum..."
  fi

  # Check that the MD5 matches
  echo "Checking ISO checksum..."
  if [ "`md5 -q $ISOTMP`" != "`cat ${ISOTMP}.md5`" ] ; then
     rollback_update
     exit_err "ISO fails checksum..."
  fi

  # Now we need to "mount" the ISO, check its contents
  MD=`mdconfig -a -t vnode -f ${ISOTMP}` ; export MD
  if [ ! -d "/mnt/iso-update" ] ; then mkdir -p "/mnt/iso-update"; fi
  mount -t cd9660 /dev/$MD /mnt/iso-update
  if [ $? -ne 0 ] ; then
     mdconfig -d -u $MD
     rollback_update
     exit_err "ISO failed mount..."
  fi

  # Now we are mounted, verify the dist files exist and can be read
  distFiles="base doc games kernel lib32"
  for i in $distFiles
  do
     if [ ! -e "/mnt/iso-update/dist/${i}.txz" ] ; then
       umount /mnt/iso-update
       mdconfig -d -u $MD
       rollback_update
       exit_err "ISO missing distfile: /dist/${i}.txz"
     fi

     echo "Verifying distfile: ${i}.txz"
     tar tf "/mnt/iso-update/dist/${i}.txz" >/dev/null 2>/dev/null
     if [ $? -ne 0 ] ; then
       umount /mnt/iso-update
       mdconfig -d -u $MD
       rollback_update
       exit_err "ISO corrupt distfile: /dist/${i}.txz"
     fi
  done

  # Lets fetch a pristine /etc for merging, don't trust an old one in /var/db
  fetch_clean_etc
  if [ $? -ne 0 ] ; then
     umount /mnt/iso-update
     mdconfig -d -u $MD
     rollback_update
     exit_err "Missing etcmerge directory: /var/db/etc"
  fi

  # Make sure we have /sbin/etcmerge copied over
  cp ${PROGDIR}/etcmerge /sbin/etcmerge
  if [ $? -ne 0 ] ; then
       umount /mnt/iso-update
       mdconfig -d -u $MD
       rollback_update
       exit_err "Failed setting up etcmerge..."
  fi
  chmod 755 /sbin/etcmerge
}

do_install() {
        # Make sure we are root and have specified updates to install
	if [ `id -u` != "0" ] ; then exit_err "Must be run as root!" ; fi
	if [ -z "$1" ] ; then exit_err "No updates specified to install!"; fi

	if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
	  pc-systemflag SYSUPDATE UPDATING #set the flag that system is updating
	fi
	# Begin to update the selected items
	for up in `echo $1 | sed 's|,| |g'`
	do
	  # If this is a major update, start it up!
  	  echo $up | grep -q "^fbsd-" 
	  if [ $? -eq 0 ] ; then 
	    start_major_fbsd_update "$up"
	    exit 0
	  elif [ "$up" == "pkg-updates" ] ; then
	    # Check if this is a pkg-update request or regular patch
            start_pkg_updates
            continue
          else
	    # Doing regular pcbsd patch
	    start_pcbsd_patch "${up}"
            continue
          fi

	done 
	if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
	  pc-systemflag SYSUPDATE SUCCESS #set the flag that system updates finished
	fi
        # All Finished!
        rm ${PATCHTMPFILE}
        exit 0
}

is_net_up() {
	ping -c 1 www.pcbsd.org >/dev/null 2>/dev/null
	ret=$?
	if [ $ret -ne 0 ]; then
	  if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
	    pc-systemflag NETRESTART ERROR #set the system flag that no internet available
	  fi
	fi
	return $ret
}

sync_pkgconf() {

  # Update systems pkgng configuration
  setup_pkgng_conf

  if [ -n "$INJAIL" ] ; then
    # Need to update pkgng config in the jail to match systems
    jDir="`jls | grep " $INJAIL " | awk '{print $4}'`"
    if [ ! -d "$jDir/usr/local/etc/pkg/repos" ] ; then
       mkdir -p ${jDir}/usr/local/etc/pkg/repos
    fi
    cp /usr/local/etc/pkg/repos/pcbsd.conf ${jDir}/usr/local/etc/pkg/repos/
  fi
}

check_pkgconf() {

  if [ -n "$INJAIL" ] ; then
    # Update systems pkgng configuration
    setup_pkgng_conf

    # Need to update pkgng config in the jail to match systems
    jDir="`jls | grep " $INJAIL " | awk '{print $4}'`"
    diff /usr/local/etc/pkg/repos/pcbsd.conf ${jDir}/usr/local/etc/pkg/repos/pcbsd.conf >/dev/null 2>/dev/null
    if [ $? -eq 0 ] ; then
       echo "Config OK!"
       exit 0
    else
       exit_err "Config differs from systems"
    fi
  fi

  # Update systems pkgng configuration
  setup_pkgng_conf
  exit $?
}

checkup_pkgs() {

  # If we are checking a jail, check that internet access is up
  if [ -n "$INJAIL" ] ; then
    test_jail_netaccess
  fi

  # Update the repo DB
  rc_halt "${PKG_CMD} update"

  # Make sure we always have an updated pkgng before attempting to
  # check for updates
  ${PKG_CMD} ${PKG_FLAG} upgrade -y pkg
  if [ $? -ne 0 ] ; then
     echo "Warning: Failed to upgrade pkgng.."
  fi

  ${PKG_CMD} ${PKG_FLAG} upgrade -n >/tmp/.pkgData.$$
  if [ $? -ne 0 ] ; then
     echo "Error checking for package updates..."
     if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
       pc-systemflag PKGUPDATE ERROR #set the system flag pkg check errored
     fi
     exit 1
  fi

  # Check fr updates now
  grep -q "Your packages are up to date" /tmp/.pkgData.$$
  if [ $? -eq 0 ] ; then
     echo "All packages are up to date!"
     if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
       pc-systemflag PKGUPDATE SUCCESS #set the system flag that packages are up to date
     fi
     rm /tmp/.pkgData.$$
     return 0
  fi

  # Display the pkg update data
  cat /tmp/.pkgData.$$
  rm /tmp/.pkgData.$$
  echo ""
  echo "To start the upgrade run \"${0} ${PKG_FLAG} pkgupdate\""
  if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
    pc-systemflag PKGUPDATE UPDATE #set the system flag that updates available
  fi
  return 0
}

update_pkgs()
{
  if [ -n "$1" -a "$1" != "-f" ] ; then
     exit_err "Invalid option $1 passed"
  fi
  if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
    pc-systemflag PKGUPDATE UPDATING #set the system flag that packages are updating
  fi
  # Don't use EVENT_PIPE for the update -f command
  if [ -n "$EVENT_PIPE" ] ; then
     oEP="$EVENT_PIPE" 
     unset EVENT_PIPE
  fi

  # Update the DB first
  ${PKG_CMD} ${PKG_FLAG} update -f

  # Enable EVENT_PIPE again
  if [ -n "$oEP" ] ; then
     EVENT_PIPE="$oEP"
     unset oEP
     export EVENT_PIPE
  fi

  # Create a new boot-environment before doing the pkg update
  if [ -z "$INJAIL" ] ; then
     create_auto_beadm
  fi

  # Start the package update!
  ${PKG_CMD} ${PKG_FLAG} upgrade -U -y ${1}
  result=$?

  # Done with EVENT_PIPE
  unset EVENT_PIPE

  # Nobody likes a litter bug
  ${PKG_CMD} ${PKG_FLAG} clean -y

  if [ -z "$INJAIL" ] ; then
    # Lets now re-extract our overlay data to grab any adjusted port files
    pc-extractoverlay ports >/dev/null 2>/dev/null
    # Now re-extract overlay files to ensure we do file fixing / massaging 
    if [ "$SYSTYPE" = "PCBSD" ]; then pc-extractoverlay desktop; fi
    if [ "$SYSTYPE" = "TRUEOS" ]; then pc-extractoverlay server; fi

    # Lets restamp grub on all ZFS disks and update config
    update_grub_boot
  fi

  if [ $result -ne 0 ] ; then
     echo "Failed updating..."
    if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
      pc-systemflag PKGUPDATE UPDATE #set the system flag that updates available
    fi
  else
    if [ -e "/usr/local/bin/pc-systemflag" -a -z "$INJAIL" ]; then
      pc-systemflag PKGUPDATE SUCCESS #set the system flag that packages are up to date
    fi
  fi
  
  exit $result
}

# Make sure this is a valid jail
set_jail_mode()
{
  # Check if this is a JID
  jls | grep -v "JID" | tr -s ' ' | sed 's,^[ \t]*,,' | grep -q "^$1 "
  if [ $? -eq 0 ] ; then
    INJAIL="$1"
    PKG_FLAG="-j $1"
    return
  fi
	
  # Is this a hostname?
  line=`jls | grep -v "JID" | tr -s ' ' | sed 's,^[ \t]*,,' | grep -w "$1" | head -n 1`
  if [ -n "$line" ] ; then
    INJAIL="`echo $line | awk '{print $1}'`"
    PKG_FLAG="-j $INJAIL"
    return
  fi

  exit_err "No such jail: $1"
}

test_jail_netaccess()
{
  # Confirm we have internet access in this jail
  jexec $INJAIL ping -c 2 -q www.pcbsd.org >/dev/null 2>/dev/null
  if [ $? -ne 0 ] ; then
    exit_err "No internet access in JID: $INJAIL"
  fi
}

do_auto_be()
{
  # User requested a new autobe to be created
  create_auto_beadm
}

if [ "`id -u`" = "0" ] ; then
  # Make the installed directory for this version
  if [ ! -d "${INSDIR}/${SYSVER}" ] ; then mkdir -p ${INSDIR}/${SYSVER} ; fi

  # Make the ignore directory for this version
  if [ ! -d "${IGNDIR}/${SYSVER}" ] ; then mkdir -p ${IGNDIR}/${SYSVER} ; fi
fi

if [ $# -eq 0 ] ; then
   show_usage
   exit 1
fi

while [ $# -gt 0 ] ; do

   case $1 in
	  autobe) do_auto_be ;;
  	   check) if [ -n "$INJAIL" ] ; then
		     exit_err "Cannot run this inside a jail..."
		  fi
		  do_fbsdcheck
		  get_update_file
                  do_check ; break ;;
        branches) get_update_file
                  list_branches ; break ;;
        chbranch) get_update_file
                  do_branch "${2}" ; break ;;
	pkgcheck) checkup_pkgs ; break ;;
	syncconf) sync_pkgconf ; break ;;
       confcheck) check_pkgconf ; break ;;
       pkgupdate) update_pkgs "$2" ; break ;;
finish-major-update) finish_major_fbsd_update ; break ;;
 	 install) if [ -n "$INJAIL" ] ; then
		     exit_err "Cannot run this inside a jail..."
		  fi
		  get_update_file
                  do_install "${2}" ; break ;;
       -j) shift 
	   set_jail_mode "$1"
           ;;
	*) show_usage ;;
   esac
   shift
done

exit 0
