#!/bin/sh
#Set cross-application notification flags

manpage(){
echo "USAGE: pc-systemflag <FLAG> <MESSAGE>
	FLAGS:
	PBIUPDATE  - PBI Update Availability Changed
	PKGUPDATE  - pkg Update Availability Changed
	SYSUPDATE  - System Update Availability Changed
	NETRESTART - Network Access Changed
	WARDENUPDATE - Warden Update Availability Changed
	SYSCACHE   - Resync syscache database (message irrelevant)

	MESSAGES:
	WORKING	-  App is currently working
	ERROR	-  App experienced an error
	SUCCESS	-  App finished successfully
	UPDATE	-  App has updates available
	UPDATING	-  App is currently performing updates
	
EXAMPLE 1: pc-systemflag PBIUPDATE UPDATE (A PBI can be updated)
EXAMPLE 2: pc-systemflag NETRESTART SUCCESS (Network restarted successfully)
EXAMPLE 3: pc-systemflag SYSUPDATE ERROR (Could not check for system updates)
"
exit 1
}

#Check for help pages
if [ ${1} = "-h" -o ${1} = "help" ]; then
 manpage
elif [ ! -n "${1}" ]; then
 manpage
fi

#echo "${1} + ${2}"

#Always check for the existance of the flag directory and try to create it if possible
FLAGDIR="/tmp/.pcbsdflags"
if [ ! -d ${FLAGDIR} ]; then
  mkdir -p -m 777 ${FLAGDIR}
fi

#Figure out which flag type this is for
if [ ${1} = "PBIUPDATE" ]; then
  FLAGFILE="${FLAGDIR}/pbi-update-available-${LOGNAME}"
elif [ ${1} = "PKGUPDATE" ]; then
  FLAGFILE="${FLAGDIR}/pkg-update-available-${LOGNAME}"
elif [ ${1} = "SYSUPDATE" ]; then
  FLAGFILE="${FLAGDIR}/sys-update-available-${LOGNAME}"
elif [ ${1} = "NETRESTART" ]; then
  FLAGFILE="${FLAGDIR}/network-restarted-${LOGNAME}"
elif [ ${1} = "WARDENUPDATE" ]; then
  FLAGFILE="${FLAGDIR}/warden-update-available-${LOGNAME}"
elif [ ${1} = "SYSCACHE" ]; then
  FLAGFILE="${FLAGDIR}/syscache-sync-${LOGNAME}"
elif [ ${1} = "CHECKDIR" ]; then
  exit 0
else
  echo "Invalid Option: ${1}"
  manpage
fi

#Figure out which flag message this is
if [ ${2} = "WORKING" ]; then
  MSG="working"
elif [ ${2} = "ERROR" ]; then
  MSG="error"
elif [ ${2} = "SUCCESS" ]; then
  MSG="success"
elif [ ${2} = "UPDATE" ]; then
  MSG="updateavailable"
elif [ ${2} = "UPDATING" ]; then
  MSG="updating"
else
  echo "Invalid Message: ${2}"
  manpage
fi
#Set the flag
if [ -f ${FLAGFILE} ]; then
  rm ${FLAGFILE} #make sure the filesystem watcher sees the file change by removing the old flag
fi
echo ${MSG} > ${FLAGFILE}
touch ${FLAGFILE} #make sure the timestamp gets reset
exit 0
